import { useState, useRef, useEffect } from 'react';
import { toast } from 'react-toastify';
import SimplePeer from 'simple-peer';
import { startCallApi, acceptCallApi, rejectCallApi, endCallApi, getCallHistoryApi } from '@/apis/videoCallService';
import { getUserId } from '@/apis/authService';
import callHubService from '@/services/callHubService';

export default function useVideoCall(currentUserId) {
    const [isCallModalOpen, setIsCallModalOpen] = useState(false);
    const [isCallActive, setIsCallActive] = useState(false);
    const [isCallIncoming, setIsCallIncoming] = useState(false);
    const [callerInfo, setCallerInfo] = useState(null);
    const [calleeInfo, setCalleeInfo] = useState(null); // Th√¥ng tin ng∆∞·ªùi nh·∫≠n cu·ªôc g·ªçi
    const [isMuted, setIsMuted] = useState(false);
    const [isVideoOff, setIsVideoOff] = useState(false);
    const [callSession, setCallSession] = useState(null);
    const [connectionEstablished, setConnectionEstablished] = useState(false);
    const [targetConnectionId, setTargetConnectionId] = useState(null);
    const [roomToken, setRoomToken] = useState(null);

    const localVideoRef = useRef(null);
    const remoteVideoRef = useRef(null);
    const peerRef = useRef(null);
    const streamRef = useRef(null);
    const targetConnectionIdRef = useRef(null);
    const roomTokenRef = useRef(null);

    // Kh·ªüi t·∫°o k·∫øt n·ªëi SignalR khi component mount
    useEffect(() => {
        // Kh·ªüi t·∫°o k·∫øt n·ªëi CallHub
        const initCallHub = async () => {
            await callHubService.initConnection();

            // ƒêƒÉng k√Ω c√°c callback
            callHubService.registerCallbacks({
                onIncomingCall: handleIncomingCall,
                onReceiveOffer: handleReceiveOffer,
                onReceiveAnswer: handleReceiveAnswer,
                onReceiveIceCandidate: handleReceiveIceCandidate,
                onCallEnded: handleCallEnded
            });
        };

        initCallHub();

        // Cleanup khi component unmount
        return () => {
            endCall();
        };
    }, []);

    // Debug useEffect ƒë·ªÉ theo d√µi connectionEstablished
    // useEffect(() => {
    //     console.log('üîÑ CONNECTION STATUS CHANGED:', {
    //         connectionEstablished,
    //         isCallActive,
    //         isCallIncoming,
    //         timestamp: new Date().toLocaleTimeString()
    //     });
    // }, [connectionEstablished, isCallActive, isCallIncoming]);

    // X·ª≠ l√Ω khi nh·∫≠n cu·ªôc g·ªçi ƒë·∫øn qua SignalR
    const handleIncomingCall = async (data) => {
        // console.log("=== NH·∫¨N CU·ªòC G·ªåI ƒê·∫æN ===");
        // console.log("Data:", data);
        // console.log("data.roomToken:", data.roomToken);
        // console.log("data.senderConnectionId:", data.senderConnectionId);
        // console.log("data.callSessionId:", data.callSessionId);

        // Tr√≠ch xu·∫•t th√¥ng tin ng∆∞·ªùi g·ªçi t·ª´ ƒë·ªëi t∆∞·ª£ng from
        const caller = data.from || {};
        const callerName = caller.fullName || data.from?.fullName || "Ng∆∞·ªùi g·ªçi";

        // Hi·ªÉn th·ªã th√¥ng b√°o c√≥ cu·ªôc g·ªçi ƒë·∫øn
        toast.info(`${callerName} ƒëang g·ªçi cho b·∫°n`, {
            autoClose: 10000,
            position: "top-right"
        });

        // Tham gia v√†o ph√≤ng cu·ªôc g·ªçi n·∫øu c√≥ roomToken
        if (data.roomToken) {
            await callHubService.joinRoom(data.roomToken);
        }

        // C·∫≠p nh·∫≠t state ƒë·ªÉ hi·ªÉn th·ªã UI cu·ªôc g·ªçi ƒë·∫øn
        // data.from ch√≠nh l√† th√¥ng tin caller (ng∆∞·ªùi g·ªçi)
        setCallerInfo({
            id: caller.accountId || data.from?.accountId,
            name: caller.fullName || data.from?.fullName || "Ng∆∞·ªùi g·ªçi",
            avatarUrl: caller.avatarUrl || data.from?.avatarUrl || "",
            connectionId: data.senderConnectionId || null
        });


        // L∆∞u th√¥ng tin phi√™n g·ªçi
        setCallSession(data.callSessionId);
        setRoomToken(data.roomToken);
        roomTokenRef.current = data.roomToken; // L∆∞u v√†o ref
        setTargetConnectionId(data.senderConnectionId || null);
        targetConnectionIdRef.current = data.senderConnectionId || null; // L∆∞u v√†o ref

        // console.log("=== SAU KHI SET REF ===");
        // console.log("roomTokenRef.current:", roomTokenRef.current);
        // console.log("targetConnectionIdRef.current:", targetConnectionIdRef.current);

        setIsCallIncoming(true);
        setIsCallModalOpen(true);
    };

    // L∆∞u offer ƒë·ªÉ x·ª≠ l√Ω sau khi peer ƒë∆∞·ª£c t·∫°o
    const pendingOfferRef = useRef(null);

    // X·ª≠ l√Ω khi nh·∫≠n offer WebRTC
    const handleReceiveOffer = (senderConnectionId, offer) => {
        // console.log("=== NH·∫¨N OFFER ===");
        // console.log("Sender ConnectionId:", senderConnectionId);
        // console.log("Offer type:", typeof offer);
        // console.log("Offer value:", offer);
        // console.log("Offer JSON:", JSON.stringify(offer));
        // console.log("Peer hi·ªán t·∫°i:", peerRef.current ? "C√≥" : "Kh√¥ng c√≥");

        // N·∫øu ƒë√£ c√≥ peer, x·ª≠ l√Ω offer ngay
        if (peerRef.current) {
            try {
                // console.log("X·ª≠ l√Ω offer ngay l·∫≠p t·ª©c v·ªõi peer hi·ªán t·∫°i");
                peerRef.current.signal(offer);
            } catch (error) {
                console.error("L·ªói khi x·ª≠ l√Ω offer:", error);
            }
        } else {
            // L∆∞u offer ƒë·ªÉ x·ª≠ l√Ω sau khi peer ƒë∆∞·ª£c t·∫°o
            // console.log("Ch∆∞a c√≥ peer, l∆∞u offer ƒë·ªÉ x·ª≠ l√Ω sau");
            // console.log("Pending offer tr∆∞·ªõc khi l∆∞u:", pendingOfferRef.current);
            pendingOfferRef.current = offer;
            // console.log("Pending offer sau khi l∆∞u:", pendingOfferRef.current);
        }
    };

    // X·ª≠ l√Ω khi nh·∫≠n answer WebRTC
    const handleReceiveAnswer = (senderConnectionId, answer) => {
        // console.log("Nh·∫≠n answer t·ª´:", senderConnectionId, answer);

        // N·∫øu ƒë√£ c√≥ peer, x·ª≠ l√Ω answer
        if (peerRef.current) {
            try {
                peerRef.current.signal(answer);
            } catch (error) {
                console.error("L·ªói khi x·ª≠ l√Ω answer:", error);
            }
        }
    };

    // X·ª≠ l√Ω khi nh·∫≠n ICE candidate
    const handleReceiveIceCandidate = (senderConnectionId, candidate) => {
        // console.log("Nh·∫≠n ICE candidate t·ª´:", senderConnectionId, candidate);

        // N·∫øu ƒë√£ c√≥ peer, x·ª≠ l√Ω ICE candidate
        if (peerRef.current) {
            try {
                peerRef.current.signal({ candidate: candidate });
            } catch (error) {
                console.error("L·ªói khi x·ª≠ l√Ω ICE candidate:", error);
            }
        }
    };

    // X·ª≠ l√Ω khi cu·ªôc g·ªçi k·∫øt th√∫c
    const handleCallEnded = (data) => {
        // console.log("Nh·∫≠n th√¥ng b√°o cu·ªôc g·ªçi k·∫øt th√∫c:", data);
        toast.info("Cu·ªôc g·ªçi ƒë√£ k·∫øt th√∫c");
        endCall();
    };

    // H√†m b·∫Øt ƒë·∫ßu cu·ªôc g·ªçi video
    const startVideoCall = async (chatRoomId, targetName, targetInfo = null) => {
        try {
            // Hi·ªÉn th·ªã modal cu·ªôc g·ªçi
            setIsCallModalOpen(true);

            // ƒê·∫£m b·∫£o k·∫øt n·ªëi CallHub ƒë√£ ƒë∆∞·ª£c thi·∫øt l·∫≠p
            const connectionId = await callHubService.initConnection();
            if (!connectionId) {
                throw new Error("Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn CallHub");
            }
            // console.log("K·∫øt n·ªëi CallHub th√†nh c√¥ng, connectionId:", connectionId);

            // M·ªü stream video v√† √¢m thanh
            const stream = await navigator.mediaDevices.getUserMedia({
                video: true,
                audio: true
            });

            // L∆∞u stream ƒë·ªÉ c√≥ th·ªÉ ƒë√≥ng sau n√†y
            streamRef.current = stream;

            // Hi·ªÉn th·ªã video local
            if (localVideoRef.current) {
                localVideoRef.current.srcObject = stream;
            }

            // G·ªçi API ƒë·ªÉ b·∫Øt ƒë·∫ßu cu·ªôc g·ªçi v√† g·ª≠i connectionId c·ªßa m√¨nh
            const callResponse = await startCallApi(chatRoomId, getUserId(), connectionId);

            // Ki·ªÉm tra v√† log response
            // console.log("Ph·∫£n h·ªìi t·ª´ startCallApi:", callResponse);
            // console.log("callResponse keys:", callResponse ? Object.keys(callResponse) : 'null');

            // L∆∞u th√¥ng tin phi√™n g·ªçi
            if (callResponse) {
                // console.log('callResponse.callSessionId:', callResponse.callSessionId);
                // console.log('callResponse.roomToken:', callResponse.roomToken);
                // console.log('callResponse.calleeConnectionId:', callResponse.calleeConnectionId);
                // console.log('callResponse.caller:', callResponse.caller);

                setCallSession(callResponse.callSessionId);

                // L∆∞u th√¥ng tin roomToken
                if (callResponse.roomToken) {
                    setRoomToken(callResponse.roomToken);
                    roomTokenRef.current = callResponse.roomToken; // L∆∞u v√†o ref ƒë·ªÉ s·ª≠ d·ª•ng ngay l·∫≠p t·ª©c
                    // console.log('ƒê√£ set roomToken:', callResponse.roomToken);
                    // Tham gia v√†o ph√≤ng cu·ªôc g·ªçi
                    await callHubService.joinRoom(callResponse.roomToken);
                } else {
                    console.warn('Kh√¥ng c√≥ roomToken trong response');
                }

                // L∆∞u th√¥ng tin ng∆∞·ªùi ƒë∆∞·ª£c g·ªçi t·ª´ targetInfo ƒë∆∞·ª£c truy·ªÅn v√†o
                // console.log(' Setting Callee Info:', targetInfo);
                if (targetInfo) {
                    const calleeData = {
                        id: targetInfo.accountId || targetInfo.id,
                        name: targetInfo.fullName || targetInfo.name || targetName,
                        avatarUrl: targetInfo.avatarUrl || "",
                        connectionId: callResponse.calleeConnectionId
                    };
                    // console.log('Callee Data:', calleeData);
                    setCalleeInfo(calleeData);
                } else {
                    // Fallback n·∫øu kh√¥ng c√≥ targetInfo
                    const fallbackData = {
                        id: null,
                        name: targetName,
                        avatarUrl: "",
                        connectionId: callResponse.calleeConnectionId
                    };
                    console.log('üìû Fallback Callee Data:', fallbackData);
                    setCalleeInfo(fallbackData);
                }

                // L∆∞u th√¥ng tin ng∆∞·ªùi g·ªçi (ch√≠nh m√¨nh)
                if (callResponse.caller) {
                    setCallerInfo({
                        id: callResponse.caller.accountId,
                        name: callResponse.caller.fullName || "B·∫°n",
                        avatarUrl: callResponse.caller.avatarUrl || "",
                        connectionId: null
                    });
                }

                // L∆∞u th√¥ng tin calleeConnectionId t·ª´ response
                if (callResponse.calleeConnectionId) {
                    setTargetConnectionId(callResponse.calleeConnectionId);
                    targetConnectionIdRef.current = callResponse.calleeConnectionId; // L∆∞u v√†o ref ƒë·ªÉ s·ª≠ d·ª•ng ngay l·∫≠p t·ª©c
                    // console.log('ƒê√£ set targetConnectionId:', callResponse.calleeConnectionId);
                } else {
                    console.warn('Kh√¥ng c√≥ calleeConnectionId trong response');
                }
            } else {
                console.warn("Kh√¥ng nh·∫≠n ƒë∆∞·ª£c d·ªØ li·ªáu ph·∫£n h·ªìi t·ª´ startCallApi");
            }

            // Thi·∫øt l·∫≠p WebRTC v·ªõi simple-peer
            // console.log('=== T·∫†O PEER CONNECTION (INITIATOR) ===');
            // console.log('Local stream:', stream);
            // console.log('Local stream tracks:', stream.getTracks());

            const peer = new SimplePeer({
                initiator: true,
                trickle: false, // T·∫Øt trickle ICE cho ·ªïn ƒë·ªãnh h∆°n
                stream: stream,
                config: {
                    iceServers: [
                        { urls: 'stun:stun.l.google.com:19302' },
                        { urls: 'stun:stun1.l.google.com:19302' },
                        { urls: 'stun:stun2.l.google.com:19302' },
                        { urls: 'stun:global.stun.twilio.com:3478' }
                    ],
                    iceCandidatePoolSize: 10
                }
            });

            // console.log('Peer created (initiator):', peer);

            // X·ª≠ l√Ω s·ª± ki·ªán khi c√≥ t√≠n hi·ªáu WebRTC (offer)
            peer.on('signal', async data => {
                // console.log('=== T√çN HI·ªÜU KH·ªûI T·∫†O CU·ªòC G·ªåI ===');
                // console.log('Signal data:', data);
                // G·ª≠i t√≠n hi·ªáu qua SignalR
                try {
                    // S·ª≠ d·ª•ng ref ƒë·ªÉ l·∫•y gi√° tr·ªã ngay l·∫≠p t·ª©c
                    const currentTargetConnectionId = targetConnectionIdRef.current;
                    const currentRoomToken = roomTokenRef.current;
                    // console.log('targetConnectionId (ref):', currentTargetConnectionId, 'roomToken (ref):', currentRoomToken);

                    if (data.type === 'offer') {
                        // ∆Øu ti√™n g·ª≠i offer qua roomToken v√¨ targetConnectionId c√≥ th·ªÉ kh√¥ng ƒë√∫ng
                        const target = currentRoomToken || currentTargetConnectionId;
                        // console.log('G·ª≠i offer ƒë·∫øn target (∆∞u ti√™n roomToken):', target);
                        await callHubService.callUser(target, data);
                    } else if (data.candidate) {
                        const target = currentRoomToken || currentTargetConnectionId;
                        // console.log('G·ª≠i ICE candidate ƒë·∫øn target (∆∞u ti√™n roomToken):', target);
                        await callHubService.sendIceCandidate(target, data.candidate);
                    }
                } catch (error) {
                    console.error("L·ªói khi g·ª≠i t√≠n hi·ªáu WebRTC:", error);
                }
            });

            // X·ª≠ l√Ω khi nh·∫≠n ƒë∆∞·ª£c stream t·ª´ ng∆∞·ªùi kh√°c
            peer.on('stream', remoteStream => {
                // console.log("=== NH·∫¨N ƒê∆Ø·ª¢C STREAM T·ª™ ƒê·ªêI PH∆Ø∆†NG ===");
                // console.log('Remote stream:', remoteStream);
                // console.log('Remote stream tracks:', remoteStream.getTracks());
                console.log('remoteVideoRef.current:', remoteVideoRef.current);

                // H√†m retry ƒë·ªÉ ƒë·ª£i video element ƒë∆∞·ª£c render
                const assignStreamWithRetry = (stream, maxRetries = 10, delay = 100) => {
                    const tryAssign = (attempt) => {
                        if (remoteVideoRef.current) {
                            remoteVideoRef.current.srcObject = stream;
                            // console.log('‚úÖ ƒê√£ g√°n stream cho remoteVideoRef (attempt:', attempt, ')');
                            // console.log('üü¢ SETTING connectionEstablished = true (t·ª´ stream event - initiator)');
                            setConnectionEstablished(true);
                        } else if (attempt < maxRetries) {
                            // console.log(`‚è≥ remoteVideoRef.current is null, retry ${attempt}/${maxRetries} sau ${delay}ms...`);
                            setTimeout(() => tryAssign(attempt + 1), delay);
                        } else {
                            console.error('‚ùå remoteVideoRef.current v·∫´n null sau', maxRetries, 'l·∫ßn th·ª≠!');
                        }
                    };
                    tryAssign(1);
                };

                assignStreamWithRetry(remoteStream);
            });

            // X·ª≠ l√Ω khi k·∫øt n·ªëi th√†nh c√¥ng
            peer.on('connect', () => {
                // console.log('üü¢ K·∫æT N·ªêI P2P TH√ÄNH C√îNG (initiator)');
                // console.log('üü¢ SETTING connectionEstablished = true (t·ª´ connect event - initiator)');
                toast.success(`ƒê√£ k·∫øt n·ªëi v·ªõi ${targetName}`);
                setConnectionEstablished(true);
            });

            // X·ª≠ l√Ω khi ƒë√≥ng k·∫øt n·ªëi
            peer.on('close', () => {
                // console.log('K·∫øt n·ªëi P2P ƒë√£ ƒë√≥ng');
                endCall();
            });

            // X·ª≠ l√Ω khi c√≥ l·ªói
            peer.on('error', (err) => {
                console.error("L·ªói k·∫øt n·ªëi peer:", err);
                toast.error("L·ªói k·∫øt n·ªëi cu·ªôc g·ªçi");
                endCall();
            });

            // L∆∞u ƒë·ªëi t∆∞·ª£ng peer ƒë·ªÉ s·ª≠ d·ª•ng sau
            peerRef.current = peer;
            // console.log('ƒê√£ l∆∞u peer v√†o peerRef (initiator):', peerRef.current);

            // Hi·ªÉn th·ªã th√¥ng b√°o ƒëang g·ªçi
            toast.info(`ƒêang g·ªçi cho ${targetName}...`);

            // ƒê√°nh d·∫•u ƒëang g·ªçi ngay l·∫≠p t·ª©c (ch∆∞a k·∫øt n·ªëi)
            setIsCallActive(true);

        } catch (error) {
            console.error("L·ªói khi b·∫Øt ƒë·∫ßu cu·ªôc g·ªçi video:", error);
            toast.error("Kh√¥ng th·ªÉ b·∫Øt ƒë·∫ßu cu·ªôc g·ªçi video: " + error.message);
            endCall();
        }
    };

    // H√†m k·∫øt th√∫c cu·ªôc g·ªçi
    const endCall = async () => {
        // D·ª´ng t·∫•t c·∫£ tracks c·ªßa stream
        if (streamRef.current) {
            streamRef.current.getTracks().forEach(track => track.stop());
            streamRef.current = null;
        }

        // ƒê√≥ng k·∫øt n·ªëi WebRTC n·∫øu c√≥
        if (peerRef.current) {
            peerRef.current.destroy();
            peerRef.current = null;
        }

        // X√≥a video
        if (localVideoRef.current) {
            localVideoRef.current.srcObject = null;
        }
        if (remoteVideoRef.current) {
            remoteVideoRef.current.srcObject = null;
        }

        // Reset tr·∫°ng th√°i cu·ªôc g·ªçi
        // console.log('üî¥ RESETTING connectionEstablished = false (endCall)');
        setIsCallActive(false);
        setIsCallIncoming(false);
        setConnectionEstablished(false);

        // Reset refs
        targetConnectionIdRef.current = null;
        roomTokenRef.current = null;

        // G·ªçi API ƒë·ªÉ k·∫øt th√∫c cu·ªôc g·ªçi n·∫øu c√≥ callSessionId
        if (callSession) {
            try {
                await endCallApi(callSession, roomToken);
            } catch (error) {
                console.error("L·ªói khi k·∫øt th√∫c cu·ªôc g·ªçi:", error);
            } finally {
                setCallerInfo(null);
                setCallSession(null);
                setRoomToken(null);
                setTargetConnectionId(null);
                setIsCallModalOpen(false);
            }
        } else {
            setCallerInfo(null);
            setRoomToken(null);
            setTargetConnectionId(null);
            setIsCallModalOpen(false);
        }
    };

    // H√†m tr·∫£ l·ªùi cu·ªôc g·ªçi
    const answerCall = async () => {
        // console.log("=== ANSWER CALL ƒê∆Ø·ª¢C G·ªåI ===");
        // console.log("callSession:", callSession);
        // console.log("roomToken state:", roomToken);
        // console.log("targetConnectionId state:", targetConnectionId);
        // console.log("roomTokenRef.current:", roomTokenRef.current);
        // console.log("targetConnectionIdRef.current:", targetConnectionIdRef.current);

        try {
            // Ki·ªÉm tra n·∫øu kh√¥ng c√≥ callSessionId
            if (!callSession) {
                toast.error("Kh√¥ng t√¨m th·∫•y th√¥ng tin cu·ªôc g·ªçi");
                return;
            }

            // ƒê·∫£m b·∫£o k·∫øt n·ªëi CallHub ƒë√£ ƒë∆∞·ª£c thi·∫øt l·∫≠p
            const connectionId = await callHubService.initConnection();
            if (!connectionId) {
                toast.error("Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn CallHub");
                return;
            }
            // console.log("K·∫øt n·ªëi CallHub th√†nh c√¥ng khi tr·∫£ l·ªùi, connectionId:", connectionId);
            // console.log("=== TH√îNG TIN NG∆Ø·ªúI NH·∫¨N ===");
            // console.log("ConnectionId c·ªßa ng∆∞·ªùi nh·∫≠n:", connectionId);
            // console.log("TargetConnectionId (ng∆∞·ªùi g·ªçi s·∫Ω g·ª≠i offer ƒë·∫øn):", targetConnectionIdRef.current);
            // console.log("RoomToken:", roomTokenRef.current);

            // M·ªü stream video v√† √¢m thanh
            const stream = await navigator.mediaDevices.getUserMedia({
                video: true,
                audio: true
            });

            streamRef.current = stream;

            if (localVideoRef.current) {
                localVideoRef.current.srcObject = stream;
            }

            // G·ªçi API ƒë·ªÉ ch·∫•p nh·∫≠n cu·ªôc g·ªçi v√† g·ª≠i connectionId hi·ªán t·∫°i
            await acceptCallApi(callSession, roomToken, connectionId);

            // Tham gia v√†o ph√≤ng cu·ªôc g·ªçi
            await callHubService.joinRoom(roomToken);

            // Thi·∫øt l·∫≠p WebRTC ƒë·ªÉ tr·∫£ l·ªùi cu·ªôc g·ªçi
            // console.log('=== T·∫†O PEER CONNECTION (ANSWERER) ===');
            // console.log('Local stream:', stream);
            // console.log('Local stream tracks:', stream.getTracks());

            const peer = new SimplePeer({
                initiator: false,
                trickle: true,
                stream: stream,
                config: {
                    iceServers: [
                        { urls: 'stun:stun.l.google.com:19302' },
                        { urls: 'stun:global.stun.twilio.com:3478' }
                    ]
                }
            });

            // console.log('Peer created (answerer):', peer);

            // X·ª≠ l√Ω s·ª± ki·ªán khi c√≥ t√≠n hi·ªáu WebRTC (answer)
            peer.on('signal', async data => {
                // console.log('=== T√çN HI·ªÜU TR·∫¢ L·ªúI CU·ªòC G·ªåI ===');
                // console.log('Answer signal data:', data);

                // G·ª≠i t√≠n hi·ªáu qua SignalR
                try {
                    // S·ª≠ d·ª•ng ref ƒë·ªÉ l·∫•y gi√° tr·ªã ngay l·∫≠p t·ª©c
                    const currentTargetConnectionId = targetConnectionIdRef.current;
                    const currentRoomToken = roomTokenRef.current;

                    if (data.type === 'answer') {
                        // console.log('G·ª≠i answer ƒë·∫øn targetConnectionId:', currentTargetConnectionId, 'ho·∫∑c roomToken:', currentRoomToken);
                        // Lu√¥n ∆∞u ti√™n g·ª≠i qua roomToken v√¨ targetConnectionId c√≥ th·ªÉ null
                        const target = currentRoomToken || currentTargetConnectionId;
                        // console.log('Target cu·ªëi c√πng ƒë·ªÉ g·ª≠i answer:', target);
                        await callHubService.answerCall(target, data);
                    } else if (data.candidate) {
                        // console.log('G·ª≠i ICE candidate ƒë·∫øn roomToken:', currentRoomToken);
                        const target = currentRoomToken || currentTargetConnectionId;
                        await callHubService.sendIceCandidate(target, data.candidate);
                    }
                } catch (error) {
                    console.error("L·ªói khi g·ª≠i t√≠n hi·ªáu WebRTC:", error);
                }
            });

            // X·ª≠ l√Ω khi nh·∫≠n ƒë∆∞·ª£c stream t·ª´ ng∆∞·ªùi g·ªçi
            peer.on('stream', remoteStream => {
                // console.log("=== NH·∫¨N ƒê∆Ø·ª¢C STREAM T·ª™ NG∆Ø·ªúI G·ªåI (ANSWER CALL) ===");
                // console.log('Remote stream:', remoteStream);
                // console.log('Remote stream tracks:', remoteStream.getTracks());
                console.log('remoteVideoRef.current:', remoteVideoRef.current);

                // H√†m retry ƒë·ªÉ ƒë·ª£i video element ƒë∆∞·ª£c render
                const assignStreamWithRetry = (stream, maxRetries = 10, delay = 100) => {
                    const tryAssign = (attempt) => {
                        if (remoteVideoRef.current) {
                            remoteVideoRef.current.srcObject = stream;
                            console.log('‚úÖ ƒê√£ g√°n stream cho remoteVideoRef trong answerCall (attempt:', attempt, ')');
                            // console.log('üü¢ SETTING connectionEstablished = true (t·ª´ stream event - answerer)');
                            setConnectionEstablished(true);
                        } else if (attempt < maxRetries) {
                            console.log(`‚è≥ remoteVideoRef.current is null trong answerCall, retry ${attempt}/${maxRetries} sau ${delay}ms...`);
                            setTimeout(() => tryAssign(attempt + 1), delay);
                        } else {
                            console.error('‚ùå remoteVideoRef.current v·∫´n null trong answerCall sau', maxRetries, 'l·∫ßn th·ª≠!');
                        }
                    };
                    tryAssign(1);
                };

                assignStreamWithRetry(remoteStream);
            });

            // X·ª≠ l√Ω khi k·∫øt n·ªëi th√†nh c√¥ng
            peer.on('connect', () => {
                // console.log('üü¢ K·∫æT N·ªêI P2P TH√ÄNH C√îNG (answerer)');
                // console.log('üü¢ SETTING connectionEstablished = true (t·ª´ connect event - answerer)');
                setConnectionEstablished(true);
                toast.success(`ƒê√£ k·∫øt n·ªëi v·ªõi ${callerInfo?.name || 'ng∆∞·ªùi g·ªçi'}`);
            });

            // X·ª≠ l√Ω khi ƒë√≥ng k·∫øt n·ªëi
            peer.on('close', () => {
                // console.log('K·∫øt n·ªëi P2P ƒë√£ ƒë√≥ng');
                endCall();
            });

            // X·ª≠ l√Ω khi c√≥ l·ªói
            peer.on('error', (err) => {
                console.error("L·ªói k·∫øt n·ªëi peer:", err);
                toast.error("L·ªói k·∫øt n·ªëi cu·ªôc g·ªçi");
                endCall();
            });

            // L∆∞u ƒë·ªëi t∆∞·ª£ng peer ƒë·ªÉ s·ª≠ d·ª•ng sau
            peerRef.current = peer;
            // console.log('ƒê√£ l∆∞u peer v√†o peerRef (answerer):', peerRef.current);

            // X·ª≠ l√Ω pending offer n·∫øu c√≥
            if (pendingOfferRef.current) {
                // console.log("=== X·ª¨ L√ù PENDING OFFER ===");
                // console.log("Pending offer:", pendingOfferRef.current);
                try {
                    peer.signal(pendingOfferRef.current);
                    pendingOfferRef.current = null;
                    // console.log("ƒê√£ x·ª≠ l√Ω pending offer th√†nh c√¥ng");
                } catch (error) {
                    console.error("L·ªói khi x·ª≠ l√Ω pending offer:", error);
                }
            } else {
                // console.log("Kh√¥ng c√≥ pending offer ƒë·ªÉ x·ª≠ l√Ω");
            }

            // ƒê√°nh d·∫•u cu·ªôc g·ªçi ƒëang ho·∫°t ƒë·ªông
            setIsCallActive(true);
            setIsCallIncoming(false);

            // Hi·ªÉn th·ªã th√¥ng b√°o ƒëang k·∫øt n·ªëi (kh√¥ng ph·∫£i ƒë√£ k·∫øt n·ªëi)
            toast.info(`ƒêang k·∫øt n·ªëi v·ªõi ${callerInfo?.name || 'ng∆∞·ªùi g·ªçi'}...`);

        } catch (error) {
            console.error("L·ªói khi tr·∫£ l·ªùi cu·ªôc g·ªçi:", error);
            toast.error("Kh√¥ng th·ªÉ tr·∫£ l·ªùi cu·ªôc g·ªçi: " + error.message);
            endCall();
        }
    };

    // H√†m t·ª´ ch·ªëi cu·ªôc g·ªçi
    const rejectCall = async () => {
        try {
            // Hi·ªÉn th·ªã th√¥ng b√°o t·ª´ ch·ªëi
            toast.info("ƒê√£ t·ª´ ch·ªëi cu·ªôc g·ªçi");

            // Ki·ªÉm tra n·∫øu kh√¥ng c√≥ callSessionId
            if (!callSession) {
                setIsCallIncoming(false);
                setCallerInfo(null);
                setIsCallModalOpen(false);
                return;
            }

            // G·ªçi API ƒë·ªÉ t·ª´ ch·ªëi cu·ªôc g·ªçi
            await rejectCallApi(callSession, roomToken);

            // G·ªçi API endCall ƒë·ªÉ ƒë·∫£m b·∫£o cu·ªôc g·ªçi ƒë∆∞·ª£c k·∫øt th√∫c ho√†n to√†n
            await endCallApi(callSession, roomToken);

        } catch (error) {
            console.error("L·ªói khi t·ª´ ch·ªëi cu·ªôc g·ªçi:", error);
        } finally {
            // Reset t·∫•t c·∫£ state li√™n quan ƒë·∫øn cu·ªôc g·ªçi
            setIsCallIncoming(false);
            setIsCallActive(false);
            setConnectionEstablished(false);
            setCallerInfo(null);
            setCallSession(null);
            setRoomToken(null);
            setTargetConnectionId(null);
            setIsCallModalOpen(false);

            // Reset refs
            targetConnectionIdRef.current = null;
            roomTokenRef.current = null;
            pendingOfferRef.current = null;

            // D·ª´ng media stream n·∫øu c√≥
            if (streamRef.current) {
                streamRef.current.getTracks().forEach(track => track.stop());
                streamRef.current = null;
            }

            // ƒê√≥ng peer connection n·∫øu c√≥
            if (peerRef.current) {
                peerRef.current.destroy();
                peerRef.current = null;
            }

            // Clear video elements
            if (localVideoRef.current) localVideoRef.current.srcObject = null;
            if (remoteVideoRef.current) remoteVideoRef.current.srcObject = null;
        }
    };

    // H√†m t·∫Øt/b·∫≠t microphone
    const toggleMute = () => {
        if (streamRef.current) {
            const audioTracks = streamRef.current.getAudioTracks();
            audioTracks.forEach(track => {
                track.enabled = !track.enabled;
            });
            setIsMuted(!isMuted);
        }
    };

    // H√†m t·∫Øt/b·∫≠t camera
    const toggleVideo = () => {
        if (streamRef.current) {
            const videoTracks = streamRef.current.getVideoTracks();
            videoTracks.forEach(track => {
                track.enabled = !track.enabled;
            });
            setIsVideoOff(!isVideoOff);
        }
    };

    return {
        // State
        isCallModalOpen,
        isCallActive,
        isCallIncoming,
        callerInfo,
        calleeInfo,
        isMuted,
        isVideoOff,
        callSession,
        connectionEstablished,

        // Refs
        localVideoRef,
        remoteVideoRef,

        // Methods
        startVideoCall,
        endCall,
        answerCall,
        rejectCall,
        toggleMute,
        toggleVideo
    };
} 